
%{
#include <stdio.h>

int yylex();

#define yyerror printf

#include "fol.hpp"

Formula parsed_formula;

%}

%token<str_attr> SYMBOL;
%token<str_attr> VARIABLE;
%token TRUE;
%token FALSE;
%token NOT;
%token AND;
%token OR;
%token IMP;
%token IFF;

%type<formula_attr> formula
%type<formula_attr> iff_formula
%type<formula_attr> imp_formula
%type<formula_attr> or_formula
%type<formula_attr> and_formula
%type<formula_attr> unary_formula
%type<formula_attr> sub_formula
%type<formula_attr> atomic_formula
%type<formula_attr> atom

%union {
  string * str_attr;
  BaseFormula * formula_attr;
}

%%

input  : formula ';'
       {
         parsed_formula = Formula($1);
	 return 0;
       }
       ;

formula : iff_formula
	{
	 $$ = $1;
	}
	;

iff_formula : iff_formula IFF imp_formula
  	{
	  $$ = new Iff(Formula($1), Formula($3));
	}
	| imp_formula
	{
	  $$ = $1;
	}
	;

imp_formula : imp_formula IMP or_formula
	    {
	      $$ = new Imp(Formula($1), Formula($3));
	    }
	    | or_formula
	    {
	      $$ = $1;
	    }
	    ;

or_formula : or_formula OR and_formula
	   {
	     $$ = new Or(Formula($1), Formula($3));
	   }
	   | and_formula
	   {
	     $$ = $1;
	   }
	   ;

and_formula : and_formula AND unary_formula
	    {
	      $$ = new And(Formula($1), Formula($3));
	    }
	    | unary_formula
	    {
	      $$ = $1;
	    }
	    ;

unary_formula : NOT unary_formula
	      {
	       $$ = new Not(Formula($2));
	      }	      
	      | sub_formula
	      {
	       $$ = $1;
	      }
	      ;

sub_formula : atomic_formula
	    {
	      $$ = $1;
	    } 
	    | '(' formula ')'
	    {
	      $$ = $2;
	    }
	    ;

atomic_formula : atom
	       {
	         $$ = $1;
	       }
	       | TRUE
	       {
	         $$ = new True();
	       }
	       | FALSE
	       {
	         $$ = new False();
	       }
	       ;

atom : VARIABLE
     {
       $$ = new Atom(*$1);
       delete $1;
     }
     ;





%%
